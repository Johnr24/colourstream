version: '3.8'

services:
  frontend:
    # image: ghcr.io/johnr24/colourstream-frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      VITE_API_URL: https://live.colourstream.example.com/api
      VITE_OIDC_AUTH_ENDPOINT: ${OIDC_AUTH_ENDPOINT:-https://sso.example.com/authorize}
      VITE_WEBRTC_WS_HOST: live.colourstream.example.com
      VITE_WEBRTC_WS_PORT: 3334
      VITE_WEBRTC_WS_PROTOCOL: wss
      VITE_WEBRTC_APP_PATH: app
      VITE_VIDEO_URL: https://video.colourstream.example.com/join
      VITE_OVENPLAYER_SCRIPT_URL: https://cdn.jsdelivr.net/npm/ovenplayer/dist/ovenplayer.js
    restart: always
    expose:
      - 3000
    networks:
      - network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`live.colourstream.example.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      
      # Static assets route - higher priority
      - "traefik.http.routers.frontend-static.rule=Host(`live.colourstream.example.com`) && (PathPrefix(`/assets`) || PathPrefix(`/static`) || Path(`/favicon.ico`) || Path(`/manifest.json`) || Path(`/robots.txt`) || Path(`/logo192.png`) || Path(`/logo512.png`) || Path(`/security.txt`) || PathPrefix(`/.well-known`))"
      - "traefik.http.routers.frontend-static.entrypoints=websecure"
      - "traefik.http.routers.frontend-static.tls=true"
      - "traefik.http.routers.frontend-static.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend-static.service=frontend"
      - "traefik.http.routers.frontend-static.priority=200"
      
      # SPA routes with proper middleware
      - "traefik.http.routers.frontend-spa.rule=Host(`live.colourstream.example.com`) && (PathPrefix(`/admin`) || PathPrefix(`/login`) || PathPrefix(`/room`))"
      - "traefik.http.routers.frontend-spa.entrypoints=websecure"
      - "traefik.http.routers.frontend-spa.tls=true"
      - "traefik.http.routers.frontend-spa.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend-spa.service=frontend"
      - "traefik.http.routers.frontend-spa.middlewares=spa-fallback"
      - "traefik.http.routers.frontend-spa.priority=100"
      
      # Middleware for SPA
      - "traefik.http.middlewares.spa-fallback.headers.customResponseHeaders.Content-Type=text/html; charset=utf-8"
      
      # Root path with middleware
      - "traefik.http.routers.frontend-root.rule=Host(`live.colourstream.example.com`) && Path(`/`)"
      - "traefik.http.routers.frontend-root.entrypoints=websecure"
      - "traefik.http.routers.frontend-root.tls=true"
      - "traefik.http.routers.frontend-root.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend-root.service=frontend"
      - "traefik.http.routers.frontend-root.priority=50"

  postgres:
    container_name: colourstream-postgres
    image: postgres:16-alpine
    restart: always
    expose:
      - "5432"
    env_file:
      - ./global.env
    environment:
      POSTGRES_USER: colourstream
      POSTGRES_DB: colourstream
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U colourstream"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=false"

  backend:
    image: ghcr.io/johnr24/colourstream-backend:latest
    restart: always
    expose:
      - 5001
    env_file:
      - ./backend/.env
      - ./global.env
    environment:
      NODE_ENV: production
      WEBAUTHN_RP_ID: live.colourstream.example.com
      WEBAUTHN_ORIGIN: https://live.colourstream.example.com
      DOMAIN: example.com
      VIDEO_DOMAIN: video.colourstream.example.com
      FRONTEND_URL: https://live.colourstream.example.com
      BASE_PATH: /api
      OME_WEBHOOK_SECRET: "your_webhook_secret_here"
      POSTGRES_USER: colourstream
      POSTGRES_DB: colourstream
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - network
    volumes:
      - ./backend/prisma:/app/prisma
      - ./backend/src:/app/src
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    labels:
      - "traefik.enable=true"
      # API routes
      - "traefik.http.routers.backend.rule=Host(`live.colourstream.example.com`) && PathPrefix(`/api`) && !PathPrefix(`/api/ws`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.routers.backend.service=backend"
      - "traefik.http.services.backend.loadbalancer.server.port=5001"
      - "traefik.http.routers.backend.middlewares=backend-headers"
      
      # WebSocket routes - updated to handle all WebSocket paths
      - "traefik.http.routers.backend-ws.rule=Host(`live.colourstream.example.com`) && PathPrefix(`/api/ws`)"
      - "traefik.http.routers.backend-ws.entrypoints=websecure"
      - "traefik.http.routers.backend-ws.tls=true"
      - "traefik.http.routers.backend-ws.tls.certresolver=myresolver"
      - "traefik.http.routers.backend-ws.service=backend-ws"
      - "traefik.http.services.backend-ws.loadbalancer.server.port=5001"
      - "traefik.http.routers.backend-ws.middlewares=websocket-headers"
      
      # Headers for regular API requests
      - "traefik.http.middlewares.backend-headers.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE"
      - "traefik.http.middlewares.backend-headers.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.backend-headers.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.backend-headers.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.backend-headers.headers.addvaryheader=true"
      
      # Headers for WebSocket connections - updated with proper WebSocket headers
      - "traefik.http.middlewares.websocket-headers.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE"
      - "traefik.http.middlewares.websocket-headers.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.websocket-headers.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.websocket-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.websocket-headers.headers.customrequestheaders.Connection=Upgrade"
      - "traefik.http.middlewares.websocket-headers.headers.customrequestheaders.Upgrade=websocket"

  traefik:
    image: traefik:v3.3.3
    restart: always
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=true"
      - "--providers.docker.network=colourstream_network"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--ping=true"
      - "--ping.entrypoint=websecure"
      - "--entrypoints.websecure.transport.respondingTimeouts.readTimeout=300s"
      - "--entrypoints.websecure.transport.respondingTimeouts.writeTimeout=300s"
      - "--entrypoints.websecure.transport.respondingTimeouts.idleTimeout=300s"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=admin@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/acme.json"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/acme.json:/acme.json
    networks:
      - network
    labels:
      - "traefik.enable=true"

  origin:
    image: airensoft/ovenmediaengine:latest #it must come from airensoft! 
    ports:
      - "8081:8081/tcp" # OVT(Origin)1
      - "8082:8082/tcp" # OVT(Origin)2
      - "9000:9000/tcp" # OVT(Origin)
      - "1935:1935/tcp" # RTMP Provider
      - "9999:9999" # SRT
      - "3333:3333" # WebRTC Signaling / LLHLS
      - "3334:3334" # TLS WebRTC Signaling / LLHLS
      - "3478:3478/tcp" # WebRTC TURN
      - "10000-10004:10000-10004/udp" # WebRTC Candidate
    environment:
      # Use domain name instead of IP address for WebRTC ICE candidates
      OME_HOST_IP: "live.colourstream.example.com"
      OME_ORIGIN_PORT: "9000"
      OME_RTMP_PROV_PORT: "1935"
      OME_SRT_PROV_PORT: "9999"
      OME_LLHLS_STREAM_PORT: "3332"
      OME_WEBRTC_SIGNALLING_PORT: "3333"
      OME_WEBRTC_SIGNALLING_TLS_PORT: "3334"
      OME_WEBRTC_TCP_RELAY_PORT: "3478"
      OME_WEBRTC_CANDIDATE_PORT: "10002-10004/udp"
      OME_API_PORT: "8081"
      OME_API_TLS_PORT: "8082"
      OME_WEBHOOK_SECRET: "your_webhook_secret_here"
      OME_API_ACCESS_TOKEN: "your_ome_api_token_here"
    env_file:
      - global.env
    restart: always
    networks:
      - network
    volumes:
      - ./ovenmediaengine/origin_conf:/opt/ovenmediaengine/bin/origin_conf
      - ./certs/certs/live.colourstream.example.com.crt:/opt/ovenmediaengine/bin/cert/cert.crt
      - ./certs/private/live.colourstream.example.com.key:/opt/ovenmediaengine/bin/cert/priv.key
    labels:
      - "traefik.enable=true"
      # WebRTC WebSocket for /ws path
      - "traefik.http.routers.ome-webrtc.rule=Host(`video.colourstream.example.com`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.ome-webrtc.entrypoints=websecure"
      - "traefik.http.routers.ome-webrtc.tls.certresolver=myresolver"
      - "traefik.http.routers.ome-webrtc.service=ome-webrtc-service"
      - "traefik.http.services.ome-webrtc-service.loadbalancer.server.port=3333"
      - "traefik.http.services.ome-webrtc-service.loadbalancer.server.scheme=ws"
      # WebSocket middleware for WebRTC
      - "traefik.http.middlewares.ome-websocket.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.ome-websocket.headers.customrequestheaders.Connection=Upgrade"
      - "traefik.http.middlewares.ome-websocket.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.routers.ome-webrtc.middlewares=ome-websocket"
      
      # WebRTC TLS Signaling for /app path on live domain
      - "traefik.http.routers.ome-webrtc-tls.rule=Host(`live.colourstream.example.com`) && PathPrefix(`/app`)"
      - "traefik.http.routers.ome-webrtc-tls.entrypoints=websecure"
      - "traefik.http.routers.ome-webrtc-tls.tls.certresolver=myresolver"
      - "traefik.http.routers.ome-webrtc-tls.service=ome-webrtc-tls-service"
      - "traefik.http.services.ome-webrtc-tls-service.loadbalancer.server.port=3334"
      - "traefik.http.services.ome-webrtc-tls-service.loadbalancer.server.scheme=ws"
      # WebSocket middleware for TLS WebRTC
      - "traefik.http.middlewares.ome-websocket-tls.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.ome-websocket-tls.headers.customrequestheaders.Connection=Upgrade"
      - "traefik.http.middlewares.ome-websocket-tls.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.routers.ome-webrtc-tls.middlewares=ome-websocket-tls"
      
      # WebRTC TLS Signaling for /app path on video domain
      - "traefik.http.routers.ome-webrtc-tls-video.rule=Host(`video.colourstream.example.com`) && PathPrefix(`/app`)"
      - "traefik.http.routers.ome-webrtc-tls-video.entrypoints=websecure"
      - "traefik.http.routers.ome-webrtc-tls-video.tls.certresolver=myresolver"
      - "traefik.http.routers.ome-webrtc-tls-video.service=ome-webrtc-tls-video-service"
      - "traefik.http.services.ome-webrtc-tls-video-service.loadbalancer.server.port=3334"
      - "traefik.http.services.ome-webrtc-tls-video-service.loadbalancer.server.scheme=ws"
      # WebSocket middleware for TLS WebRTC on video domain
      - "traefik.http.middlewares.ome-websocket-tls-video.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.ome-websocket-tls-video.headers.customrequestheaders.Connection=Upgrade"
      - "traefik.http.middlewares.ome-websocket-tls-video.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.routers.ome-webrtc-tls-video.middlewares=ome-websocket-tls-video"

  edge:
    image: airensoft/ovenmediaengine:latest #it must come from airensoft! 
    ports:
      - "4333:3333/tcp" # WebRTC Signaling / LLHLS
      - "3479:3479/tcp" # WebRTC TURN
      - "10005-10009:10005-10009/udp" # WebRTC Candidate
    environment:
      # Also use domain name for edge instead of IP address
      OME_HOST_IP: "live.colourstream.example.com"
      DEFAULT_ORIGIN_SERVER: "origin"
      DEFAULT_ORIGIN_PORT: "9000"
      OME_LLHLS_STREAM_PORT: "3330"
      OME_WEBRTC_SIGNALLING_PORT: "3333"
      OME_WEBRTC_SIGNALLING_TLS_PORT: "3334"
      OME_WEBRTC_TCP_RELAY_PORT: "3479"
      OME_WEBRTC_CANDIDATE_PORT: "10005-10009/udp"
      OME_API_ACCESS_TOKEN: "your_ome_api_token_here"
    env_file:
      - global.env
    restart: always
    volumes:
      - ./ovenmediaengine/edge_conf:/opt/ovenmediaengine/bin/edge_conf
      - ./ovenmediaengine/edge_conf:/opt/ovenmediaengine/bin/origin_conf
      - ./certs/certs/live.colourstream.example.com.crt:/opt/ovenmediaengine/bin/cert/cert.crt
      - ./certs/private/live.colourstream.example.com.key:/opt/ovenmediaengine/bin/cert/priv.key
    networks:
      - network

  mirotalk:
    image: mirotalk/p2p:latest
    restart: always
    container_name: colourstream-mirotalk
    hostname: mirotalk
    expose:
      - 3000
    volumes:
      - ./mirotalk/.env:/src/.env
    environment:
      STUN_SERVER_ENABLED: "true"
      STUN_SERVER_URL: "stun:stun.l.google.com:19302"
      TURN_SERVER_ENABLED: "true"
      TURN_SERVER_URL: "turn:video.colourstream.example.com:3480"
      TURN_SERVER_USERNAME: "colourstream"
      OIDC_ENABLED: "false"
      HOST_PROTECTED: "true"
      TRUST_PROXY: "true"
      SEVER_TUNNEL: "false"
    env_file:
      - global.env
      - mirotalk/.env
    networks:
      - network

  coturn:
    image: coturn/coturn
    container_name: colourstream-coturn
    restart: always
    volumes:
      - ./coturn/turnserver.conf:/etc/coturn/turnserver.conf
      - ./certs/certs/video.colourstream.example.com.crt:/certs/video.colourstream.example.com.crt
      - ./certs/private/video.colourstream.example.com.key:/certs/video.colourstream.example.com.key
    ports:
      - "3480:3480"
      - "3480:3480/udp"
      - "5350:5350"
      - "5350:5350/udp"
      - "30000-31000:30000-31000/udp"
    networks:
      - network
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.coturn.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.coturn.entrypoints=websecure"
      - "traefik.tcp.routers.coturn.service=coturn"
      - "traefik.tcp.services.coturn.loadbalancer.server.port=3480"

volumes:
  postgres_data:
    name: colourstream_postgres_data

networks:
  network:
    driver: bridge