// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Room {
  id              String   @id @default(uuid())
  name            String
  mirotalkRoomId  String   @unique
  streamKey       String   @unique
  password        String
  displayPassword String
  expiryDate      DateTime
  link            String   @unique
  presenterLink   String?  @unique
  mirotalkToken   String?  // Optional since we might not always have a token
  createdAt       DateTime @default(now())
}

model obssettings {
  id              String   @id @default("default")
  host            String   @default("localhost")
  port            Int      @default(4455)
  password        String?
  enabled         Boolean  @default(false)
  streamType      String   @default("rtmp_custom")
  protocol        String   @default("rtmp")
  useLocalNetwork Boolean  @default(true)
  localNetworkMode String  @default("frontend")
  localNetworkHost String? @default("localhost")
  localNetworkPort Int?    @default(4455)
  srtUrl          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model blockedIP {
  id             String    @id @default(uuid())
  hashedIP       String    @unique
  originalIP     String    // Store the original IP for display
  reason         String
  blockedAt      DateTime  @default(now())
  unblockAt      DateTime?
  failedAttempts Int       @default(0)
  isActive       Boolean   @default(true)
}

model WebAuthnCredential {
  id              String   @id @default(uuid())
  credentialId    String   @unique
  publicKey       String
  counter         BigInt
  userId          String   // We want to allow multiple passkeys per user
  transports      String?  // JSON string of allowed transports
  createdAt       DateTime @default(now())
  lastUsed        DateTime @default(now())
}

model OIDCConfig {
  id                String   @id @default("default")
  enabled           Boolean  @default(false)
  providerName      String   @default("Generic")
  clientId          String?
  clientSecret      String?
  discoveryUrl      String?
  authorizationUrl  String?
  tokenUrl          String?
  userInfoUrl       String?
  scope             String   @default("openid profile email")
  redirectUri       String?
  logoutUrl         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
} 