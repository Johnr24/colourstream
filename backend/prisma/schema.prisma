// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id              String   @id @default(uuid())
  name            String
  mirotalkRoomId  String   @unique
  streamKey       String   @unique
  password        String
  displayPassword String
  expiryDate      DateTime
  link            String   @unique
  presenterLink   String?  @unique
  mirotalkToken   String?  // Optional since we might not always have a token
  createdAt       DateTime @default(now())
}

model obssettings {
  id              String   @id @default("default")
  host            String   @default("localhost")
  port            Int      @default(4455)
  password        String?
  enabled         Boolean  @default(false)
  streamType      String   @default("rtmp_custom")
  protocol        String   @default("rtmp")
  useLocalNetwork Boolean  @default(true)
  localNetworkMode String  @default("frontend")
  localNetworkHost String? @default("localhost")
  localNetworkPort Int?    @default(4455)
  srtUrl          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model blockedIP {
  id             String    @id @default(uuid())
  hashedIP       String    @unique
  originalIP     String    // Store the original IP for display
  reason         String
  blockedAt      DateTime  @default(now())
  unblockAt      DateTime?
  failedAttempts Int       @default(0)
  isActive       Boolean   @default(true)
}

model WebAuthnCredential {
  id              String   @id @default(uuid())
  credentialId    String   @unique
  publicKey       String
  counter         BigInt
  userId          String   // We want to allow multiple passkeys per user
  transports      String?  // JSON string of allowed transports
  createdAt       DateTime @default(now())
  lastUsed        DateTime @default(now())
}

model OIDCConfig {
  id                String   @id @default("default")
  enabled           Boolean  @default(false)
  providerName      String   @default("Generic")
  clientId          String?
  clientSecret      String?
  discoveryUrl      String?
  authorizationUrl  String?
  tokenUrl          String?
  userInfoUrl       String?
  scope             String   @default("openid profile email")
  redirectUri       String?
  logoutUrl         String?
  group             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model OIDCAuthRequest {
  id           String   @id @default(uuid())
  state        String   @unique
  codeVerifier String
  nonce        String
  redirectUrl  String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model Client {
  id          String    @id @default(uuid())
  name        String
  code        String?   @unique  // Optional business code/identifier
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  clientId    String        // Reference to client
  client      Client        @relation(fields: [clientId], references: [id])
  uploadLinks UploadLink[]
  files       UploadedFile[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model UploadLink {
  id          String    @id @default(uuid())
  token       String    @unique
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  expiresAt   DateTime
  maxUses     Int?
  usedCount   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum UploadStatus {
  uploading
  completed
  cancelled
  error
}

model UploadedFile {
  id          String       @id @default(uuid())
  name        String
  path        String?
  size        Float
  mimeType    String?
  hash        String
  status      String       @default("completed")
  storage     String       @default("local") // "local" or "s3" to track where the file is stored
  url         String?      // Optional URL for S3 storage
  project     Project      @relation(fields: [projectId], references: [id])
  projectId   String
  createdAt   DateTime     @default(now())
  completedAt DateTime?
}

// Model for storing Telegram message IDs associated with uploads
model TelegramMessage {
  id           String   @id @default(uuid())
  uploadId     String   @unique  // The ID of the upload this message corresponds to
  messageId    Int      // The Telegram message ID
  chatId       String   // The Telegram chat ID
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([uploadId])
} 