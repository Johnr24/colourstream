#!/bin/sh

# Get organized directory from environment variable or use default
ORGANIZED_DIR="${TUS_ORGANIZED_DIR:-/data/tusd-uploads/organized}"
INFO_DIR="${TUS_INFO_DIR:-/data/tusd-uploads}"

# Log to a file for debugging
LOG_FILE="$INFO_DIR/hook_log.txt"
echo "====== HOOK INVOKED $(date) ======" >> $LOG_FILE

# Get the upload ID
ID="$TUS_ID"
echo "Processing upload ID: $ID" >> $LOG_FILE
echo "Using organized directory: $ORGANIZED_DIR" >> $LOG_FILE
echo "Using info directory: $INFO_DIR" >> $LOG_FILE

# Function to safely decode base64 with fallback
decode_metadata() {
    local value="$1"
    local default="$2"
    
    # If empty, return default
    if [ -z "$value" ]; then
        echo "$default"
        return
    fi
    
    # Try to remove "base64," prefix if present
    local data="${value#base64,}"
    
    # Try to decode
    local decoded
    decoded=$(echo "$data" | base64 -d 2>/dev/null) || decoded=""
    
    # If decode failed, use default
    if [ -z "$decoded" ]; then
        echo "$default"
    else
        echo "$decoded"
    fi
}

# Log all environment variables for debugging
echo "All TUS environment variables:" >> $LOG_FILE
env | grep TUS_ >> $LOG_FILE

# Read metadata directly from the info file which is more reliable
INFO_FILE="$INFO_DIR/$ID.info"
echo "Checking info file: $INFO_FILE" >> $LOG_FILE

if [ -f "$INFO_FILE" ]; then
    echo "Info file exists, extracting metadata from it" >> $LOG_FILE
    
    # Extract metadata using grep and cut (basic JSON parsing)
    # Note: this is a simplified approach and may break with complex JSON
    FILENAME=$(grep -o '"filename":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4 || echo "unknown.bin")
    
    # Try multiple possible keys for client ID
    CLIENT=$(grep -o '"clientId":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    if [ -z "$CLIENT" ]; then
        CLIENT=$(grep -o '"clientid":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(grep -o '"client_id":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(grep -o '"client":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(grep -o '"clientName":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT="default_client"
    fi
    
    # Try multiple possible keys for project ID
    PROJECT=$(grep -o '"projectId":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    if [ -z "$PROJECT" ]; then
        PROJECT=$(grep -o '"projectid":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(grep -o '"project_id":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(grep -o '"project":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(grep -o '"projectName":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT="default_project"
    fi
    
    # Extract file size if available
    FILESIZE=$(grep -o '"Size":[0-9]*' "$INFO_FILE" | cut -d':' -f2 || echo "0")
    
    # If filename is empty or not found, try the "name" field as backup
    if [ -z "$FILENAME" ] || [ "$FILENAME" = "unknown.bin" ]; then
        FILENAME=$(grep -o '"name":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4 || echo "unknown.bin")
    fi
else
    echo "Info file not found, falling back to environment variables" >> $LOG_FILE
    # Fall back to environment variables if info file is not available
    FILENAME=$(decode_metadata "$TUS_META_FILENAME" "$(decode_metadata "$TUS_META_filename" "unknown.bin")")
    
    # Try multiple environment variable formats for client ID
    CLIENT=$(decode_metadata "$TUS_META_CLIENTID" "")
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_clientId" "")
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_clientid" "")
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_client_id" "")
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_clientName" "")
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_CLIENT" "default_client")
    fi
    
    # Try multiple environment variable formats for project ID
    PROJECT=$(decode_metadata "$TUS_META_PROJECTID" "")
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_projectId" "")
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_projectid" "")
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_project_id" "")
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_projectName" "")
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_PROJECT" "default_project")
    fi
    
    # Get file size from environment variables
    FILESIZE="${TUS_SIZE:-0}"
fi

echo "Extracted metadata:" >> $LOG_FILE
echo "  Filename: $FILENAME" >> $LOG_FILE
echo "  Client: $CLIENT" >> $LOG_FILE
echo "  Project: $PROJECT" >> $LOG_FILE
echo "  Size: $FILESIZE bytes" >> $LOG_FILE

# Create target directory
TARGET_DIR="$ORGANIZED_DIR/$CLIENT/$PROJECT"
mkdir -p "$TARGET_DIR"
echo "Created directory: $TARGET_DIR" >> $LOG_FILE

# Target file path
TARGET_FILE="$TARGET_DIR/$FILENAME"

# Move the file to the organized directory (more efficient than copying)
echo "Moving $INFO_DIR/$ID to $TARGET_FILE" >> $LOG_FILE
mv "$INFO_DIR/$ID" "$TARGET_FILE"

# Check if move was successful
if [ $? -eq 0 ]; then
    echo "Successfully moved file to $TARGET_FILE" >> $LOG_FILE
    MOVE_STATUS="Successfully moved"
else
    echo "WARNING: Move failed, attempting to copy instead" >> $LOG_FILE
    # Try copying instead
    cp "$INFO_DIR/$ID" "$TARGET_FILE"
    if [ $? -eq 0 ]; then
        echo "Successfully copied file to $TARGET_FILE" >> $LOG_FILE
        MOVE_STATUS="Successfully copied (move failed)"
    else
        echo "ERROR: Both move and copy operations failed" >> $LOG_FILE
        MOVE_STATUS="ERROR: File organization failed"
    fi
fi

# Function to format file size in a human-readable format
format_size() {
    local size=$1
    if [ $size -lt 1024 ]; then
        echo "${size} B"
    elif [ $size -lt 1048576 ]; then
        echo "$(( size / 1024 )) KB"
    elif [ $size -lt 1073741824 ]; then
        echo "$(( size / 1048576 )) MB"
    else
        echo "$(( size / 1073741824 )) GB"
    fi
}

# Format file size
HUMAN_SIZE=$(format_size $FILESIZE)

# Send notification to backend service (which can forward to Telegram)
# First, try direct HTTP access to the backend service
echo "Sending completion notification to backend service" >> $LOG_FILE

# Prepare message content
MESSAGE="<b>âœ… Upload Completed</b>
<b>File:</b> $FILENAME
<b>Size:</b> $HUMAN_SIZE
<b>Client:</b> $CLIENT
<b>Project:</b> $PROJECT
<b>ID:</b> $ID
<b>Location:</b> $TARGET_FILE
<b>Status:</b> $MOVE_STATUS"

# Try to send to backend's Telegram notification endpoint
echo "Sending notification to http://backend:5001/api/upload-hooks/telegram-notify" >> $LOG_FILE
wget -q -O- --header="Content-Type: application/json" --post-data="{
  \"type\": \"upload_complete\",
  \"uploadId\": \"$ID\",
  \"filename\": \"$FILENAME\",
  \"size\": $FILESIZE,
  \"client\": \"$CLIENT\",
  \"project\": \"$PROJECT\",
  \"targetPath\": \"$TARGET_FILE\",
  \"status\": \"$MOVE_STATUS\"
}" http://backend:5001/api/upload-hooks/telegram-notify >> $LOG_FILE 2>&1

# If wget fails (no response or error), try a direct Telegram API call
if [ $? -ne 0 ]; then
    echo "Backend notification failed, trying direct Telegram API call" >> $LOG_FILE
    
    # Get Telegram config from environment (these should be set in the container)
    # Check if variables exist in the container environment
    echo "Trying direct Telegram API, token: ${TELEGRAM_BOT_TOKEN:0:10}... chat ID: ${TELEGRAM_CHAT_ID}" >> $LOG_FILE
    
    # Only proceed if we have the required Telegram credentials
    if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
        echo "Sending direct Telegram notification" >> $LOG_FILE
        
        # URL encode the message (basic encoding for special characters)
        MESSAGE_ENCODED=$(echo "$MESSAGE" | sed 's/ /%20/g; s/&/%26/g; s/</%3C/g; s/>/%3E/g; s/\n/%0A/g')
        
        # Check if we have a stored message ID for this upload
        MESSAGE_ID_FILE="$INFO_DIR/$ID.msgid"
        
        if [ -f "$MESSAGE_ID_FILE" ]; then
            # Read the message ID
            MESSAGE_ID=$(cat "$MESSAGE_ID_FILE")
            echo "Found stored message ID: $MESSAGE_ID for upload $ID" >> $LOG_FILE
            
            # Use editMessageText to update the existing message for completion
            wget -q -O- "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/editMessageText?chat_id=$TELEGRAM_CHAT_ID&message_id=$MESSAGE_ID&text=$MESSAGE_ENCODED&parse_mode=HTML" >> $LOG_FILE 2>&1
            
            if [ $? -eq 0 ]; then
                echo "Telegram message updated successfully (Message ID: $MESSAGE_ID)" >> $LOG_FILE
                # Clean up the message ID file as we're done with this upload
                rm -f "$MESSAGE_ID_FILE"
                echo "Removed message ID file for completed upload" >> $LOG_FILE
            else
                echo "Failed to update Telegram message, sending new message" >> $LOG_FILE
                # Send a new message as fallback
                wget -q -O- "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&text=$MESSAGE_ENCODED&parse_mode=HTML" >> $LOG_FILE 2>&1
                
                if [ $? -eq 0 ]; then
                    echo "Direct Telegram notification sent successfully" >> $LOG_FILE
                else
                    echo "Direct Telegram notification failed" >> $LOG_FILE
                fi
            fi
        else
            # Send to Telegram as a new message
            wget -q -O- "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&text=$MESSAGE_ENCODED&parse_mode=HTML" >> $LOG_FILE 2>&1
            
            if [ $? -eq 0 ]; then
                echo "Direct Telegram notification sent successfully" >> $LOG_FILE
            else
                echo "Direct Telegram notification failed" >> $LOG_FILE
            fi
        fi
    else
        echo "Telegram credentials not available, skipping direct notification" >> $LOG_FILE
    fi
fi

echo "Hook processing complete for $ID" >> $LOG_FILE
exit 0 