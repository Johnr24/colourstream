#!/bin/sh
# Tusd post-finish hook: Notify backend's unified hook endpoint

# Exit immediately if a command exits with a non-zero status.
set -e
# Print each command before executing it (for debugging)
set -x # Enable detailed command execution logging

# --- Configuration ---
# URL of your backend's unified hook handler
BACKEND_HOOK_URL="http://backend:5001/api/upload/hook-event"

# --- Extract Tusd Environment Variables ---
UPLOAD_ID="$TUS_ID"
UPLOAD_SIZE="${TUS_SIZE:-0}" # Default to 0 if not set
UPLOAD_OFFSET="${TUS_OFFSET:-0}" # Default to 0 if not set

# --- Basic Validation ---
if [ -z "$UPLOAD_ID" ]; then
  echo "[Tus Hook - post-finish] Error: TUS_ID environment variable is missing." >&2
  exit 1 # Exit with error
fi

# Optional: Check if offset matches size (basic completion check)
if [ "$UPLOAD_OFFSET" -ne "$UPLOAD_SIZE" ]; then
    echo "[Tus Hook - post-finish] Warning: Offset ($UPLOAD_OFFSET) does not match Size ($UPLOAD_SIZE) for upload $UPLOAD_ID. Notifying backend anyway." >&2
    # Decide if you want to exit here or let the backend handle the discrepancy
    # exit 1
fi

# --- Prepare JSON Payload for the backend controller ---
# The backend controller will read the .info file itself.
# We just need to tell it which hook ran and the upload ID.
# Include size/offset as they are readily available and might be useful for the backend.
JSON_PAYLOAD=$(cat <<EOF
{
  "hookType": "post-finish",
  "uploadId": "$UPLOAD_ID",
  "size": $UPLOAD_SIZE,
  "offset": $UPLOAD_OFFSET
}
EOF
)

# --- Send Data to Backend API (Run SYNCHRONOUSLY - wait for backend to move file) --- 
logger.info(`Sending notification to backend at: ${BACKEND_HOOK_URL} with payload: ${JSON.stringify(JSON_PAYLOAD)}`);
echo "[Tus Hook - post-finish] Sending notification to backend with wget (waiting for response): $BACKEND_HOOK_URL for Upload ID: $UPLOAD_ID" >&2
    logger.info(`Sending notification to backend at: ${BACKEND_HOOK_URL} with payload: ${JSON.stringify(JSON_PAYLOAD)}`);
# --post-data sends the JSON payload. --header sets the content type.
wget -O /dev/null \
     --header="Content-Type: application/json" \
     --post-data="$JSON_PAYLOAD" \
     "$BACKEND_HOOK_URL"
     logger.info(`Notification sent to backend for upload ID: ${UPLOAD_ID}`);
     logger.info(`Response from backend: ${response}`);
     logger.info(`Notification sent to backend for upload ID: ${UPLOAD_ID}`);

WGET_EXIT_CODE=$?
if [ $WGET_EXIT_CODE -eq 0 ]; then
  echo "[Tus Hook - post-finish] Successfully notified backend for $UPLOAD_ID (file move/processing handled by backend)." >&2
  exit 0 # Success
else
  # wget exit codes: https://www.gnu.org/software/wget/manual/wget.html#Exit-Status
  # Common codes: 4: Network failure, 5: SSL verification failure, 6: Auth failure, 7: Protocol errors, 8: Server issued an error response (e.g., 4xx, 5xx).
  echo "[Tus Hook - post-finish] Error: Backend notification/processing failed for $UPLOAD_ID. wget exit code: $WGET_EXIT_CODE" >&2
  # Exit with the wget error code to signal failure to Tusd
  exit $WGET_EXIT_CODE
fi
