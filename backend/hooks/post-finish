#!/bin/sh

# Get organized directory from environment variable or use default
ORGANIZED_DIR="${TUS_ORGANIZED_DIR:-/data/tusd-uploads/organized}"
INFO_DIR="${TUS_INFO_DIR:-/data/tusd-uploads}"

# Log to a file for debugging
LOG_FILE="$INFO_DIR/hook_log.txt"
echo "====== HOOK INVOKED $(date) ======" >> $LOG_FILE

# Get the upload ID
ID="$TUS_ID"
echo "Processing upload ID: $ID" >> $LOG_FILE
echo "Using organized directory: $ORGANIZED_DIR" >> $LOG_FILE
echo "Using info directory: $INFO_DIR" >> $LOG_FILE

# Function to safely decode base64 with fallback
decode_metadata() {
    local value="$1"
    local default="$2"
    
    # If empty, return default
    if [ -z "$value" ]; then
        echo "$default"
        return
    fi
    
    # Try to remove "base64," prefix if present
    local data="${value#base64,}"
    
    # Try to decode
    local decoded
    decoded=$(echo "$data" | base64 -d 2>/dev/null) || decoded=""
    
    # If decode failed, use default
    if [ -z "$decoded" ]; then
        echo "$default"
    else
        echo "$decoded"
    fi
}

# Log all environment variables for debugging
echo "All TUS environment variables:" >> $LOG_FILE
env | grep TUS_ >> $LOG_FILE

# Read metadata directly from the info file which is more reliable
INFO_FILE="$INFO_DIR/$ID.info"
echo "Checking info file: $INFO_FILE" >> $LOG_FILE

if [ -f "$INFO_FILE" ]; then
    echo "Info file exists, extracting metadata from it" >> $LOG_FILE
    
    # Extract metadata using grep and cut (basic JSON parsing)
    # Note: this is a simplified approach and may break with complex JSON
    FILENAME=$(grep -o '"filename":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4 || echo "unknown.bin")
    
    # Try multiple possible keys for client ID
    CLIENT=$(grep -o '"clientId":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    if [ -z "$CLIENT" ]; then
        CLIENT=$(grep -o '"clientid":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(grep -o '"client_id":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(grep -o '"client":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT="default_client"
    fi
    
    # Try multiple possible keys for project ID
    PROJECT=$(grep -o '"projectId":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    if [ -z "$PROJECT" ]; then
        PROJECT=$(grep -o '"projectid":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(grep -o '"project_id":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(grep -o '"project":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT="default_project"
    fi
    
    # If filename is empty or not found, try the "name" field as backup
    if [ -z "$FILENAME" ] || [ "$FILENAME" = "unknown.bin" ]; then
        FILENAME=$(grep -o '"name":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4 || echo "unknown.bin")
    fi
else
    echo "Info file not found, falling back to environment variables" >> $LOG_FILE
    # Fall back to environment variables if info file is not available
    FILENAME=$(decode_metadata "$TUS_META_FILENAME" "$(decode_metadata "$TUS_META_filename" "unknown.bin")")
    
    # Try multiple environment variable formats for client ID
    CLIENT=$(decode_metadata "$TUS_META_CLIENTID" "")
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_clientId" "")
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_clientid" "")
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_client_id" "")
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_CLIENT" "default_client")
    fi
    
    # Try multiple environment variable formats for project ID
    PROJECT=$(decode_metadata "$TUS_META_PROJECTID" "")
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_projectId" "")
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_projectid" "")
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_project_id" "")
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_PROJECT" "default_project")
    fi
fi

echo "Extracted metadata:" >> $LOG_FILE
echo "  Filename: $FILENAME" >> $LOG_FILE
echo "  Client: $CLIENT" >> $LOG_FILE
echo "  Project: $PROJECT" >> $LOG_FILE

# Create target directory
TARGET_DIR="$ORGANIZED_DIR/$CLIENT/$PROJECT"
mkdir -p "$TARGET_DIR"
echo "Created directory: $TARGET_DIR" >> $LOG_FILE

# Target file path
TARGET_FILE="$TARGET_DIR/$FILENAME"

# Move the file to the organized directory (more efficient than copying)
echo "Moving $INFO_DIR/$ID to $TARGET_FILE" >> $LOG_FILE
mv "$INFO_DIR/$ID" "$TARGET_FILE"

# Check if move was successful
if [ $? -eq 0 ]; then
    echo "Successfully moved file to $TARGET_FILE" >> $LOG_FILE
else
    echo "WARNING: Move failed, attempting to copy instead" >> $LOG_FILE
    # Try copying instead
    cp "$INFO_DIR/$ID" "$TARGET_FILE"
    if [ $? -eq 0 ]; then
        echo "Successfully copied file to $TARGET_FILE" >> $LOG_FILE
    else
        echo "ERROR: Both move and copy operations failed" >> $LOG_FILE
    fi
fi

echo "Hook processing complete for $ID" >> $LOG_FILE
exit 0 