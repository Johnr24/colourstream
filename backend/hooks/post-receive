#!/bin/sh

# Get info directory from environment variable or use default
INFO_DIR="${TUS_INFO_DIR:-/data/tusd-uploads}"

# Log to a file for debugging
LOG_FILE="$INFO_DIR/hook_log.txt"

# Get the upload ID and other variables
ID="$TUS_ID"
OFFSET="${TUS_OFFSET:-0}"
SIZE="${TUS_SIZE:-1}"  # Prevent division by zero

# Calculate progress percentage
PROGRESS=$((OFFSET * 100 / SIZE))

# Only log every 10% to avoid log spam
# Use a temporary file to track last reported progress
PROGRESS_FILE="$INFO_DIR/$ID.progress"
REPORT_PROGRESS=0

if [ ! -f "$PROGRESS_FILE" ]; then
  # First time seeing this upload, record progress and report it
  echo "$PROGRESS" > "$PROGRESS_FILE"
  REPORT_PROGRESS=1
else
  # Get last reported progress
  LAST_PROGRESS=$(cat "$PROGRESS_FILE")
  
  # Update if progress has increased by at least 10 percentage points
  if [ $((PROGRESS - LAST_PROGRESS)) -ge 10 ]; then
    echo "$PROGRESS" > "$PROGRESS_FILE"
    REPORT_PROGRESS=1
  fi
fi

# If progress doesn't need to be reported, exit early
if [ "$REPORT_PROGRESS" -eq 0 ]; then
  exit 0
fi

# Log basic info
echo "====== POST-RECEIVE HOOK INVOKED $(date) ======" >> $LOG_FILE
echo "Upload progress - ID: $ID, Progress: $PROGRESS%" >> $LOG_FILE

# Function to safely decode base64 with fallback
decode_metadata() {
    local value="$1"
    local default="$2"
    
    # If empty, return default
    if [ -z "$value" ]; then
        echo "$default"
        return
    fi
    
    # Try to remove "base64," prefix if present
    local data="${value#base64,}"
    
    # Try to decode
    local decoded
    decoded=$(echo "$data" | base64 -d 2>/dev/null) || decoded=""
    
    # If decode failed, use default
    if [ -z "$decoded" ]; then
        echo "$default"
    else
        echo "$decoded"
    fi
}

# Read metadata from the info file if it exists
INFO_FILE="$INFO_DIR/$ID.info"

if [ -f "$INFO_FILE" ]; then
    # Extract metadata using grep and cut (basic JSON parsing)
    FILENAME=$(grep -o '"filename":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4 || echo "unknown.bin")
    
    # Try multiple possible keys for client name
    CLIENT=$(grep -o '"clientId":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    if [ -z "$CLIENT" ]; then
        CLIENT=$(grep -o '"clientid":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(grep -o '"client_id":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(grep -o '"client":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(grep -o '"clientName":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT="default_client"
    fi
    
    # Try multiple possible keys for project name
    PROJECT=$(grep -o '"projectId":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    if [ -z "$PROJECT" ]; then
        PROJECT=$(grep -o '"projectid":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(grep -o '"project_id":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(grep -o '"project":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(grep -o '"projectName":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4)
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT="default_project"
    fi
    
    # If filename is empty or not found, try the "name" field as backup
    if [ -z "$FILENAME" ] || [ "$FILENAME" = "unknown.bin" ]; then
        FILENAME=$(grep -o '"name":"[^"]*"' "$INFO_FILE" | cut -d'"' -f4 || echo "unknown.bin")
    fi
else
    # Fall back to environment variables if info file is not available
    FILENAME=$(decode_metadata "$TUS_META_FILENAME" "$(decode_metadata "$TUS_META_filename" "unknown.bin")")
    
    # Try multiple environment variable formats for client name
    CLIENT=$(decode_metadata "$TUS_META_CLIENTID" "")
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_clientId" "")
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_clientid" "")
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_client_id" "")
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_clientName" "")
    fi
    if [ -z "$CLIENT" ]; then
        CLIENT=$(decode_metadata "$TUS_META_CLIENT" "default_client")
    fi
    
    # Try multiple environment variable formats for project name
    PROJECT=$(decode_metadata "$TUS_META_PROJECTID" "")
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_projectId" "")
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_projectid" "")
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_project_id" "")
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_projectName" "")
    fi
    if [ -z "$PROJECT" ]; then
        PROJECT=$(decode_metadata "$TUS_META_PROJECT" "default_project")
    fi
fi

echo "Extracted metadata:" >> $LOG_FILE
echo "  Filename: $FILENAME" >> $LOG_FILE
echo "  Client: $CLIENT" >> $LOG_FILE
echo "  Project: $PROJECT" >> $LOG_FILE
echo "  Size: $SIZE bytes" >> $LOG_FILE
echo "  Offset: $OFFSET bytes" >> $LOG_FILE
echo "  Progress: $PROGRESS%" >> $LOG_FILE

# Function to format file size in a human-readable format
format_size() {
    local size=$1
    if [ $size -lt 1024 ]; then
        echo "${size} B"
    elif [ $size -lt 1048576 ]; then
        echo "$(( size / 1024 )) KB"
    elif [ $size -lt 1073741824 ]; then
        echo "$(( size / 1048576 )) MB"
    else
        echo "$(( size / 1073741824 )) GB"
    fi
}

# Format file sizes
HUMAN_SIZE=$(format_size $SIZE)
HUMAN_OFFSET=$(format_size $OFFSET)

# Send notification to backend service
echo "Sending progress notification to backend service" >> $LOG_FILE

# Try to send to backend's Telegram notification endpoint
echo "Sending notification to http://backend:5001/api/upload-hooks/telegram-notify" >> $LOG_FILE
wget -q -O- --header="Content-Type: application/json" --post-data="{
  \"type\": \"upload_progress\",
  \"uploadId\": \"$ID\",
  \"filename\": \"$FILENAME\",
  \"size\": $SIZE,
  \"offset\": $OFFSET,
  \"progress\": $PROGRESS,
  \"client\": \"$CLIENT\",
  \"project\": \"$PROJECT\"
}" http://backend:5001/api/upload-hooks/telegram-notify >> $LOG_FILE 2>&1

# If wget fails, try a direct Telegram API call
if [ $? -ne 0 ]; then
    echo "Backend notification failed, trying direct Telegram API call" >> $LOG_FILE
    
    # Get Telegram config from environment (these should be set in the container)
    # Check if variables exist in the container environment
    echo "Trying direct Telegram API, token: ${TELEGRAM_BOT_TOKEN:0:10}... chat ID: ${TELEGRAM_CHAT_ID}" >> $LOG_FILE
    
    # Only proceed if we have the required Telegram credentials
    if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
        echo "Sending direct Telegram notification" >> $LOG_FILE
        
        # URL encode the message (basic encoding for special characters)
        MESSAGE_ENCODED=$(echo "$MESSAGE" | sed 's/ /%20/g; s/&/%26/g; s/</%3C/g; s/>/%3E/g; s/\n/%0A/g')
        
        # Check if we have a stored message ID for this upload
        MESSAGE_ID_FILE="$INFO_DIR/$ID.msgid"
        
        if [ -f "$MESSAGE_ID_FILE" ]; then
            # Read the message ID
            MESSAGE_ID=$(cat "$MESSAGE_ID_FILE")
            echo "Found stored message ID: $MESSAGE_ID for upload $ID" >> $LOG_FILE
            
            # Use editMessageText to update the existing message
            wget -q -O- "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/editMessageText?chat_id=$TELEGRAM_CHAT_ID&message_id=$MESSAGE_ID&text=$MESSAGE_ENCODED&parse_mode=HTML" >> $LOG_FILE 2>&1
            
            if [ $? -eq 0 ]; then
                echo "Telegram message updated successfully (Message ID: $MESSAGE_ID)" >> $LOG_FILE
            else
                echo "Failed to update Telegram message, falling back to sending new message" >> $LOG_FILE
                # Send a new message as fallback
                wget -q -O- "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&text=$MESSAGE_ENCODED&parse_mode=HTML" >> $LOG_FILE 2>&1
            fi
        else
            echo "No stored message ID found for upload $ID, sending new message" >> $LOG_FILE
            # Send to Telegram as a new message
            wget -q -O- "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&text=$MESSAGE_ENCODED&parse_mode=HTML" > /tmp/telegram_response.json 2>> $LOG_FILE
            
            # Extract and store message ID for future updates
            if [ $? -eq 0 ]; then
                # Try to extract message_id using grep and sed
                MESSAGE_ID=$(grep -o '"message_id":[0-9]*' /tmp/telegram_response.json | sed 's/"message_id"://')
                
                if [ -n "$MESSAGE_ID" ]; then
                    # Store message ID in a file for this upload
                    echo "$MESSAGE_ID" > "$MESSAGE_ID_FILE"
                    echo "Stored Telegram message ID: $MESSAGE_ID for upload $ID" >> $LOG_FILE
                    echo "Direct Telegram notification sent successfully (Message ID: $MESSAGE_ID)" >> $LOG_FILE
                else
                    echo "Failed to extract message ID from Telegram response" >> $LOG_FILE
                    echo "Direct Telegram notification sent but couldn't track message ID" >> $LOG_FILE
                fi
            else
                echo "Direct Telegram notification failed" >> $LOG_FILE
            fi
        fi
    else
        echo "Telegram credentials not available, skipping direct notification" >> $LOG_FILE
    fi
fi

echo "Post-receive hook processing complete for $ID" >> $LOG_FILE
exit 0 